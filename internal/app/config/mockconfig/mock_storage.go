// Code generated by mockery. DO NOT EDIT.

package mockconfig

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// Storage is an autogenerated mock type for the Storage type
type Storage struct {
	mock.Mock
}

type Storage_Expecter struct {
	mock *mock.Mock
}

func (_m *Storage) EXPECT() *Storage_Expecter {
	return &Storage_Expecter{mock: &_m.Mock}
}

// Get provides a mock function with given fields: ctx, key
func (_m *Storage) Get(ctx context.Context, key string) (string, error) {
	ret := _m.Called(ctx, key)

	if len(ret) == 0 {
		panic("no return value specified for Get")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (string, error)); ok {
		return rf(ctx, key)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) string); ok {
		r0 = rf(ctx, key)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, key)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Storage_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type Storage_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
func (_e *Storage_Expecter) Get(ctx interface{}, key interface{}) *Storage_Get_Call {
	return &Storage_Get_Call{Call: _e.mock.On("Get", ctx, key)}
}

func (_c *Storage_Get_Call) Run(run func(ctx context.Context, key string)) *Storage_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *Storage_Get_Call) Return(url string, err error) *Storage_Get_Call {
	_c.Call.Return(url, err)
	return _c
}

func (_c *Storage_Get_Call) RunAndReturn(run func(context.Context, string) (string, error)) *Storage_Get_Call {
	_c.Call.Return(run)
	return _c
}

// Store provides a mock function with given fields: ctx, key, url, overwrite
func (_m *Storage) Store(ctx context.Context, key string, url string, overwrite bool) error {
	ret := _m.Called(ctx, key, url, overwrite)

	if len(ret) == 0 {
		panic("no return value specified for Store")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, key, url, overwrite)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_Store_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Store'
type Storage_Store_Call struct {
	*mock.Call
}

// Store is a helper method to define mock.On call
//   - ctx context.Context
//   - key string
//   - url string
//   - overwrite bool
func (_e *Storage_Expecter) Store(ctx interface{}, key interface{}, url interface{}, overwrite interface{}) *Storage_Store_Call {
	return &Storage_Store_Call{Call: _e.mock.On("Store", ctx, key, url, overwrite)}
}

func (_c *Storage_Store_Call) Run(run func(ctx context.Context, key string, url string, overwrite bool)) *Storage_Store_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *Storage_Store_Call) Return(_a0 error) *Storage_Store_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_Store_Call) RunAndReturn(run func(context.Context, string, string, bool) error) *Storage_Store_Call {
	_c.Call.Return(run)
	return _c
}

// StoreBatch provides a mock function with given fields: ctx, keys, urls
func (_m *Storage) StoreBatch(ctx context.Context, keys []string, urls []string) error {
	ret := _m.Called(ctx, keys, urls)

	if len(ret) == 0 {
		panic("no return value specified for StoreBatch")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, []string, []string) error); ok {
		r0 = rf(ctx, keys, urls)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Storage_StoreBatch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'StoreBatch'
type Storage_StoreBatch_Call struct {
	*mock.Call
}

// StoreBatch is a helper method to define mock.On call
//   - ctx context.Context
//   - keys []string
//   - urls []string
func (_e *Storage_Expecter) StoreBatch(ctx interface{}, keys interface{}, urls interface{}) *Storage_StoreBatch_Call {
	return &Storage_StoreBatch_Call{Call: _e.mock.On("StoreBatch", ctx, keys, urls)}
}

func (_c *Storage_StoreBatch_Call) Run(run func(ctx context.Context, keys []string, urls []string)) *Storage_StoreBatch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string), args[2].([]string))
	})
	return _c
}

func (_c *Storage_StoreBatch_Call) Return(_a0 error) *Storage_StoreBatch_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *Storage_StoreBatch_Call) RunAndReturn(run func(context.Context, []string, []string) error) *Storage_StoreBatch_Call {
	_c.Call.Return(run)
	return _c
}

// NewStorage creates a new instance of Storage. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewStorage(t interface {
	mock.TestingT
	Cleanup(func())
}) *Storage {
	mock := &Storage{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
